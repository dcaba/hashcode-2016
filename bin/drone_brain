#!/usr/bin/env ruby

require_relative '../lib/product_type'
require_relative '../lib/warehouse'
require_relative '../lib/location'
require_relative '../lib/order'
require_relative '../lib/drone'
require_relative '../lib/engine'

def initialize_program
	$init_time = Time.now
	$current_turn = 0
	raise "Expecting input file as an argument" if ARGV.size == 0
	welcome_message="Simulation starting at #{time}"
	puts "INFO:"+"".center(80,"#")
	puts "INFO:"+welcome_message.center(80,"#")
	puts "INFO:"+"".center(80,"#")
end


def finish_program
	bye_message="Simulation finished at #{time}...saving stats"
	puts "INFO:"+"".center(80,"#")
	puts "INFO:"+ bye_message.center(80,"#")
	puts "INFO:"+"".center(80,"#")
	#$games.each {|game| game.save_high_scores File.join(File.dirname(__FILE__),"#{game.title}.out")}
	puts "INFO: EXECUTION TIME: #{((Time.now - $init_time)*1000).to_i} mili-seconds"
end

def time
	Time.now.strftime "%H:%M:%S"
end


def loader(file) 
	File.open(file,mode="r") do |file|
		# parameters   of   the   simulation
		line=file.gets
		elements = line.split
		rows = elements[0].to_i
		cols = elements[1].to_i
		ndrones = elements[2].to_i
		$max_turns = elements[3].to_i
		max_payload = elements[4].to_i
		puts "INFO: we got parms of the simulation"
		puts "DEBUG: rows: #{rows}"
		puts "DEBUG: cols: #{cols}"
		puts "DEBUG: ndrones: #{ndrones}"
		puts "DEBUG: max_turns: #{$max_turns}"
		puts "DEBUG: max_payload: #{max_payload}"	

		# weights   of   the   products   available   for   orders 
		nptypes = file.gets.chomp.to_i 
		ptypes = Array.new
		i=0
		file.gets.split.each do |weight|
			ptypes << ProductType.new(i,weight)	
			i += 1
		end
		raise "list of ptypes weights not matching number of ptypes" if ptypes.size != nptypes
		puts "INFO: we got #{ptypes.size} ptypes, and expecting #{nptypes}"
		ptypes.each {|ptype| puts "DEBUG: #{ptype.inspect}"}

		# warehouses   and   availability   of   individual   product   types
		nwarehouses = file.gets.chomp.to_i 
		warehouses = Array.new
		i=0
		nwarehouses.times do 
			(row,col) = file.gets.split 
			wlocation = Location.new(row.chomp.to_i,col.chomp.to_i)
			warehouse = Warehouse.new(i,wlocation)	
			p = 0
			file.gets.split.each {|qty| warehouse.add_items(ptypes[p],qty.chomp.to_i);p+=1}
			warehouses << warehouse	
			i += 1
		end
		puts "INFO: we got #{warehouses.size} warehouses"
		warehouses.each {|warehouse| puts "DEBUG: #{warehouse.inspect}"}

		# orders
		norders = file.gets.chomp.to_i 
		orders = Array.new
		i=0
		norders.times do 
			(row,col) = file.gets.split 
			olocation = Location.new(row.chomp.to_i,col.chomp.to_i)
			order = Order.new(i,olocation)	
			qty = file.gets.chomp.to_i
			file.gets.split.each {|pid| order.add_items(ptypes[pid.to_i],1)}
			raise "list of ordered items not matching qty" if order.requested_qty != qty
			puts "INFO: for order #{order.id} we got #{order.requested_qty} items, and expecting #{qty}"
			orders << order	
			i += 1
		end
		puts "INFO: we got #{orders.size} orders"
		orders.each {|order| puts "DEBUG: #{order.inspect}"}

		# drones
		drones = Array.new
		ndrones.times { |id| drones << Drone.new(id,warehouses[0].location,max_payload) }
		puts "INFO: we got #{drones.size} drones"
		drones.each {|drone| puts "DEBUG: #{drone.inspect}"}

		return {ptypes:ptypes,warehouses:warehouses,orders:orders,drones:drones}

	end
end

def results_calculator(name,orders)
	completed_orders = orders.select { |order| order.status == "closed" }
	score = completed_orders.inject(0) {|sum,order| sum + order.score}	
	puts "INFO: #{name}: Number of orders: #{orders.size}"
	puts "INFO: #{name}:Number of completed orders: #{completed_orders.size}"
	puts "INFO: #{name}:% completed orders: #{(completed_orders.size+0.0)/orders.size}"
	puts "INFO: #{name}: SCORE: #{score}"

end

initialize_program
environment = loader ARGV[0]
engines = [:DummyEngine,:OrderPerspectiveEngine]
engines.each do |engine|
	i_engine = Object.const_get(engine).new
	i_engine.load(environment)
	i_engine.run()
	results_calculator(i_engine.class,environment[:orders])
end
finish_program
